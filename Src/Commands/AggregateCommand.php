<?php

namespace ResearchGate\Src\Commands;

use ResearchGate\Src\Model\AggregatedValues;
use ResearchGate\Src\Model\RandomOrgApiSettings;
use ResearchGate\Src\Services\NumberAggregator;
use ResearchGate\Src\Services\StreamToNumberIterator;
use ResearchGate\Src\Services\SecureRandomNumberListGenerator;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;

class AggregateCommand extends Command
{
    const NUMBERS_COUNT = 10000;

    public function __construct()
    {
        parent::__construct();
    }

    protected function configure()
    {
        $description = "<info>Aggregates the data for a collection of Numbers from a List of Numbers";
        $description .= "\n There are 3 ways you can run this script :";

        $description .= "\n\n I. For Standard(console) Input -
                         <comment>`cat FILE | php console.php aggregate.php` FILE is Readable File</comment>";

        $description .= "\n\n II. Please Enter  for aggregation of numbers from api from 'random.org'";
        $description .= "\n\t please enter number of random numbers(default 1000) as second argument";
        $description .= "\n\t for e.g. if you need get 5000 random numbers, then -> 
                         <comment>php console.php aggregate.php random 5000 </comment>";

        $description .= "\n\n Please enter 3 for random numbers generated by a secure php script";
        $description .= "\n\t please enter number of random numbers(default 1000) as second argument";
        $description .= "\n\t for e.g. if you need to aggregate 5000 random numbers, then ->
                         <comment>php console.php aggregate.php api 5000</comment>";
        $description .= "</info>";
        $this
            ->setName('Aggregate')
            ->setDescription($description)
            ->setDefinition(
                new InputDefinition(array(
                    new InputOption('option', 'option', InputOption::VALUE_OPTIONAL),
                    new InputOption('count','cnt', InputOption::VALUE_OPTIONAL),
                ))
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $option                 = $input->getOption('option');
        $count                  = $input->getOption('count');
        $numberAggregator       = new NumberAggregator(-1-PHP_INT_MAX, PHP_INT_MAX);
        $streamToNumberIterator = new StreamToNumberIterator();

        $this->aggregateConsoleInput($numberAggregator, $streamToNumberIterator, $output);

        if(!$count) {
            $count = self::NUMBERS_COUNT;
        }

        if($option === 'api') {
            $randomOrgApiSettings = new RandomOrgApiSettings($count);
            $generator = $streamToNumberIterator->iterate(fopen($randomOrgApiSettings->getUrl(), 'r'));

        } elseif ($option === 'random') {
            $secureNumberAggregator = new SecureRandomNumberListGenerator();
            $generator = $secureNumberAggregator->generate($count);
        } else {
            $output->writeln("<error>Please choose api or random as Option</error>");
            exit;
        }

        $aggregatedValues = $numberAggregator->aggregate($generator);

        $this->printValues($output, $aggregatedValues);
    }

    /**
     * @param NumberAggregator $numberAggregator
     * @param StreamToNumberIterator $streamToNumberIterator
     * @param OutputInterface $output
     */
    private function aggregateConsoleInput(
        NumberAggregator $numberAggregator,
        StreamToNumberIterator $streamToNumberIterator,
        OutputInterface $output)
    {
        $fh = fopen('php://stdin', 'r');
        $read = array($fh);
        $write = null;
        $except = null;
        $flag = false;


        if (stream_select($read, $write, $except, 0) === 1) {
            $aggregatedValues = $numberAggregator->aggregate($streamToNumberIterator->iterate(STDIN));
            $flag = true;
            $this->printValues($output, $aggregatedValues);
        }
        fclose($fh);
        if ($flag) {
            exit;
        }
    }

    /**
     * @param OutputInterface $output
     * @param AggregatedValues $aggregatedValues
     */
    private function printValues(OutputInterface $output, AggregatedValues $aggregatedValues)
    {
        $output->writeln("count: " . $aggregatedValues->getCountOfNumbers());
        $output->writeln("sum:" . $aggregatedValues->getSum());
        $output->writeln("min: " . $aggregatedValues->getMin());
        $output->writeln("max:" . $aggregatedValues->getMax());
        $output->writeln("average: " . $aggregatedValues->getAverage());
    }
}
